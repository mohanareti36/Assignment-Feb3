#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqTOSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Mohanzensar")]
	public partial class EmplinqsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmp(Emp instance);
    partial void UpdateEmp(Emp instance);
    partial void DeleteEmp(Emp instance);
    partial void Insertdept(dept instance);
    partial void Updatedept(dept instance);
    partial void Deletedept(dept instance);
    #endregion
		
		public EmplinqsDataContext() : 
				base(global::LinqTOSql.Properties.Settings.Default.MohanzensarConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EmplinqsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmplinqsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmplinqsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmplinqsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Emp> Emps
		{
			get
			{
				return this.GetTable<Emp>();
			}
		}
		
		public System.Data.Linq.Table<dept> depts
		{
			get
			{
				return this.GetTable<dept>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_DelEmp")]
		public int sp_DelEmp([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> empid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), empid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_InsertEmp")]
		public int sp_InsertEmp([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string ename, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> sal, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> dno)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ename, sal, dno);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_Sel")]
		public ISingleResult<sp_SelResult> sp_Sel([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> empid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), empid);
			return ((ISingleResult<sp_SelResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_UpdateEmp")]
		public int sp_UpdateEmp([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> empid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(20)")] string ename, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> sal, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> deptid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), empid, ename, sal, deptid);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_WOPara")]
		public int sp_WOPara([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> empcnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), empcnt);
			empcnt = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Emp")]
	public partial class Emp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Empid;
		
		private string _EmpName;
		
		private System.Nullable<double> _sal;
		
		private System.Nullable<int> _deptno;
		
		private EntityRef<dept> _dept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpidChanging(int value);
    partial void OnEmpidChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnsalChanging(System.Nullable<double> value);
    partial void OnsalChanged();
    partial void OndeptnoChanging(System.Nullable<int> value);
    partial void OndeptnoChanged();
    #endregion
		
		public Emp()
		{
			this._dept = default(EntityRef<dept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Empid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Empid
		{
			get
			{
				return this._Empid;
			}
			set
			{
				if ((this._Empid != value))
				{
					this.OnEmpidChanging(value);
					this.SendPropertyChanging();
					this._Empid = value;
					this.SendPropertyChanged("Empid");
					this.OnEmpidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="VarChar(20)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sal", DbType="Float")]
		public System.Nullable<double> sal
		{
			get
			{
				return this._sal;
			}
			set
			{
				if ((this._sal != value))
				{
					this.OnsalChanging(value);
					this.SendPropertyChanging();
					this._sal = value;
					this.SendPropertyChanged("sal");
					this.OnsalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptno", DbType="Int")]
		public System.Nullable<int> deptno
		{
			get
			{
				return this._deptno;
			}
			set
			{
				if ((this._deptno != value))
				{
					if (this._dept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndeptnoChanging(value);
					this.SendPropertyChanging();
					this._deptno = value;
					this.SendPropertyChanged("deptno");
					this.OndeptnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_Emp", Storage="_dept", ThisKey="deptno", OtherKey="deptid", IsForeignKey=true)]
		public dept dept
		{
			get
			{
				return this._dept.Entity;
			}
			set
			{
				dept previousValue = this._dept.Entity;
				if (((previousValue != value) 
							|| (this._dept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dept.Entity = null;
						previousValue.Emps.Remove(this);
					}
					this._dept.Entity = value;
					if ((value != null))
					{
						value.Emps.Add(this);
						this._deptno = value.deptid;
					}
					else
					{
						this._deptno = default(Nullable<int>);
					}
					this.SendPropertyChanged("dept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dept")]
	public partial class dept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _deptid;
		
		private string _deptname;
		
		private EntitySet<Emp> _Emps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndeptidChanging(int value);
    partial void OndeptidChanged();
    partial void OndeptnameChanging(string value);
    partial void OndeptnameChanged();
    #endregion
		
		public dept()
		{
			this._Emps = new EntitySet<Emp>(new Action<Emp>(this.attach_Emps), new Action<Emp>(this.detach_Emps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int deptid
		{
			get
			{
				return this._deptid;
			}
			set
			{
				if ((this._deptid != value))
				{
					this.OndeptidChanging(value);
					this.SendPropertyChanging();
					this._deptid = value;
					this.SendPropertyChanged("deptid");
					this.OndeptidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptname", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string deptname
		{
			get
			{
				return this._deptname;
			}
			set
			{
				if ((this._deptname != value))
				{
					this.OndeptnameChanging(value);
					this.SendPropertyChanging();
					this._deptname = value;
					this.SendPropertyChanged("deptname");
					this.OndeptnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_Emp", Storage="_Emps", ThisKey="deptid", OtherKey="deptno")]
		public EntitySet<Emp> Emps
		{
			get
			{
				return this._Emps;
			}
			set
			{
				this._Emps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Emps(Emp entity)
		{
			this.SendPropertyChanging();
			entity.dept = this;
		}
		
		private void detach_Emps(Emp entity)
		{
			this.SendPropertyChanging();
			entity.dept = null;
		}
	}
	
	public partial class sp_SelResult
	{
		
		private int _Empid;
		
		private string _EmpName;
		
		private System.Nullable<double> _sal;
		
		private System.Nullable<int> _deptno;
		
		private string _deptname;
		
		public sp_SelResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Empid", DbType="Int NOT NULL")]
		public int Empid
		{
			get
			{
				return this._Empid;
			}
			set
			{
				if ((this._Empid != value))
				{
					this._Empid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="VarChar(20)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this._EmpName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sal", DbType="Float")]
		public System.Nullable<double> sal
		{
			get
			{
				return this._sal;
			}
			set
			{
				if ((this._sal != value))
				{
					this._sal = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptno", DbType="Int")]
		public System.Nullable<int> deptno
		{
			get
			{
				return this._deptno;
			}
			set
			{
				if ((this._deptno != value))
				{
					this._deptno = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptname", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string deptname
		{
			get
			{
				return this._deptname;
			}
			set
			{
				if ((this._deptname != value))
				{
					this._deptname = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
